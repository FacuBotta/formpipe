{"version":3,"sources":["../src/escape.ts","../src/isEmail.ts","../src/isInRange.ts","../src/isString.ts"],"sourcesContent":["/**\n * Escapes HTML special characters in a string\n * @param value The string to escape\n * @returns The escaped string\n */\nexport function escape(value: string): string {\n  const htmlEntities: Record<string, string> = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n  };\n\n  return value.replace(/[&<>\"']/g, (char) => htmlEntities[char]);\n}\n","export const isEmail = (value: string): boolean => {\n  // RFC 5322 compliant email validation\n  const regex =\n    /^(?=[a-zA-Z0-9@._%+-]{6,254}$)[a-zA-Z0-9._%+-]{1,64}@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  // Basic structural validation\n  if (!regex.test(value)) {\n    return false;\n  }\n\n  // Additional checks for common issues\n  const parts = value.split('@');\n  const local = parts[0];\n  const domain = parts[1];\n\n  // Check local part\n  if (local.startsWith('.') || local.endsWith('.')) {\n    return false;\n  }\n  if (local.includes('..')) {\n    return false;\n  }\n\n  // Check domain part\n  if (domain.startsWith('.') || domain.endsWith('.')) {\n    return false;\n  }\n  if (domain.includes('..')) {\n    return false;\n  }\n\n  return true;\n};\n","/**\n * Checks if a string's length is within a specified range (inclusive)\n * @param value The string to check\n * @param min The minimum length allowed\n * @param max The maximum length allowed\n * @returns true if the string length is within range, false otherwise\n * @example\n * isInRange(\"hello\", 3, 6) // true\n * isInRange(\"hi\", 3, 6) // false\n */\nexport function isInRange(value: string, min: number, max: number): boolean {\n  if (typeof value !== 'string') return false;\n  const length = value.length;\n  return length >= min && length <= max;\n}\n","/**\n * Checks if a value is a string\n * @param value The value to check\n * @returns true if the value is a string, false otherwise\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n"],"mappings":"AAKO,SAASA,EAAOC,EAAuB,CAC5C,IAAMC,EAAuC,CAC3C,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,OACP,EAEA,OAAOD,EAAM,QAAQ,WAAaE,GAASD,EAAaC,CAAI,CAAC,CAC/D,CCfO,IAAMC,EAAWC,GAA2B,CAMjD,GAAI,CAHF,qFAGS,KAAKA,CAAK,EACnB,MAAO,GAIT,IAAMC,EAAQD,EAAM,MAAM,GAAG,EACvBE,EAAQD,EAAM,CAAC,EACfE,EAASF,EAAM,CAAC,EActB,MAXI,EAAAC,EAAM,WAAW,GAAG,GAAKA,EAAM,SAAS,GAAG,GAG3CA,EAAM,SAAS,IAAI,GAKnBC,EAAO,WAAW,GAAG,GAAKA,EAAO,SAAS,GAAG,GAG7CA,EAAO,SAAS,IAAI,EAK1B,ECtBO,SAASC,EAAUC,EAAeC,EAAaC,EAAsB,CAC1E,GAAI,OAAOF,GAAU,SAAU,MAAO,GACtC,IAAMG,EAASH,EAAM,OACrB,OAAOG,GAAUF,GAAOE,GAAUD,CACpC,CCTO,SAASE,EAASC,EAAiC,CACxD,OAAO,OAAOA,GAAU,QAC1B","names":["escape","value","htmlEntities","char","isEmail","value","parts","local","domain","isInRange","value","min","max","length","isString","value"]}